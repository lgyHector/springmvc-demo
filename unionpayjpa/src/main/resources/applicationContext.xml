<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/context      
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/cache 
    http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd 
    http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="true">
	<!-- 属性文件位置 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<!-- 相应驱动的jdbcUrl -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 数据库的用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!-- 数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- JPA实体管理器工厂 配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- 依赖注入上面定义的数据源dataSource -->
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<!-- 加入定制化包路径 加载model包底下的 -->
		<property name="packagesToScan" value="com.**.model" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop><!-- validate/update/create -->
				<!-- 设置Hibernate是否在控制台输出SQL语句，开发调试阶段通常设为true -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 设置Hibernate一个提交批次中的最大SQL语句数 -->
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="show_sql">50</prop>
				<prop key="hibernate.format_sql">false</prop>
				<!-- 建表的命名规则 -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
			</props>
		</property>
	</bean>

	<!-- 设置JPA实现厂商的特定属性 -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform" value="${hibernate.dialect}" />
	</bean>

	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Spring Data Jpa配置 -->
	<jpa:repositories base-package="com.unionpay"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />


	<!-- 利用继承的思想简化配置，要把abstract="true" -->
	<!--<bean id="transactionBase" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" 
		lazy-init="true" abstract="true"> 配置事务管理器 <property name="transactionManager"> 
		<ref bean="transactionManager" /> </property> 配置事务属性 <property name="transactionAttributes"> 
		<props> <prop key="delete*">PROPAGATION_REQUIRED</prop> <prop key="add*">PROPAGATION_REQUIRED</prop> 
		<prop key="update*">PROPAGATION_REQUIRED</prop> <prop key="save*">PROPAGATION_REQUIRED</prop> 
		<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop> </props> </property> 
		</bean> -->

	<!-- 配置声明式事务 自动代理 -->
	<!-- <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor"> 
		<property name="transactionManager"> <ref bean="transactionManager" /> </property> 
		自动代理 <bean id="autoproxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"> 
		可以是Service或DAO层（最好是针对业务层*Service） <property name="beanNames"> <list> <value>*Service</value> 
		</list> </property> <property name="interceptorNames"> <list> <value>transactionInterceptor</value> 
		</list> </property> </bean> -->







	<!-- 属性文件位置 -->
	<context:property-placeholder location="classpath:redis.properties" />
	<!-- spring redis 配置文件 -->
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1">
			<list>
				<!-- 从机配置 -->
				<bean name="slaver" class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.slaver.host}" />
					<constructor-arg index="1" value="${redis.slaver.port}"
						type="int" />
				</bean>
				<!-- 主机配置 -->
				<bean name="master" class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.master.host}" />
					<constructor-arg index="1" value="${redis.master.port}"
						type="int" />
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="2048" />
		<property name="maxIdle" value="200" />
		<property name="numTestsPerEvictionRun" value="1024" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<property name="minEvictableIdleTimeMillis" value="-1" />
		<property name="softMinEvictableIdleTimeMillis" value="10000" />
		<property name="maxWaitMillis" value="1500" />
		<property name="testOnBorrow" value="true" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnReturn" value="false" />
		<property name="jmxEnabled" value="true" />
		<property name="jmxNamePrefix" value="youyuan" />
		<property name="blockWhenExhausted" value="false" />
	</bean>








</beans>